import clr
import pprint

import time
from enum import Enum

clr.AddReference("System.Management")
# noinspection PyUnresolvedReferences
from System.Management import ManagementScope as _ManagementScope, ObjectQuery, ManagementObjectSearcher, \
  ManagementObject, ManagementPath, ManagementClass, TextFormat


class ManagementScope(object):
  def __init__(self, scope_string=r"\\localhost\ROOT\virtualization\v2"):
    self._scope_string = scope_string
    self.scope = _ManagementScope(self._scope_string)

  def query(self, query_string):
    query = ObjectQuery(query_string)
    searcher = ManagementObjectSearcher(self.scope, query)
    return list(searcher.Get())

  def createClassInstance(self, cls):
    mo = ManagementClass(str(self.scope.Path) + ":" + cls)
    return mo.CreateInstance()

  def queryOne(self, query_string):
    result = self.query(query_string)
    if len(result) != 1:
      raise Exception("Wanted to get one instance, got '%s'" % str(len(result)))
    return result[0]


class Path(int, Enum):
  RELATED = 0
  PROPERTY = 1


class Property(int, Enum):
  ARRAY = 2
  SINGLE = 3


def ManagementObjectTransformer(value):
  """
  Transform given ``value`` path to ManagementObject.

  :param value: string that represents path to ManagementObject
  :return: resulting ManagementObject
  """
  mp = ManagementPath(value)
  mo = ManagementObject()
  mo.Path = mp
  mo.Get()
  return mo


def management_object_traversal(_path, parent):
  results = []
  if _path[0][0] == Path.PROPERTY:
    val = parent.Properties[_path[0][1]].Value
    if _path[0][2][0] == Property.SINGLE:
      results.append([_path[0][2][1](val)])
    elif _path[0][2][0] == Property.ARRAY:
      for val_item in val:
        results.append([_path[0][2][1](val_item)])
    else:
      raise Exception("Unknown property type")
    return results
  if _path[0][0] == Path.RELATED:
    for obj in parent.GetRelated(_path[0][1]):
      if len(_path) == 1:
        results.append([obj])
      elif not obj.Equals(parent):
        for result_obj in management_object_traversal(_path[1:], obj):
          cur_res = [obj]
          cur_res.extend(result_obj)
          results.append(cur_res)
    return results
  raise Exception("Unknown path part type")


def get_properties(obj):
  res = {}
  for prop in obj.Properties:
    res[prop.Name] = prop.Value
  return res

# noinspection PyUnresolvedReferences
from System import Array, String



def callWmiMethod(obj, method, **kwargs):
  inParams = obj.GetMethodParameters(method)
  for k, v in kwargs.items():
    _v = None
    if isinstance(v, list):
      _v = []
      for val_item in v:
        _v.append(val_item.GetText(TextFormat.WmiDtd20))
    else:
      _v = v.GetText(TextFormat.WmiDtd20)

    inParams.Properties[k].Value = _v
  outParams = obj.InvokeMethod(method, inParams, None)


def create_vm(name=None, cpu=1, memory=1024, dynamicMemory=True):
  pass


scope = ManagementScope()
machine = scope.queryOne(
  'SELECT * FROM Msvm_ComputerSystem WHERE Caption = "Virtual Machine" AND ElementName = "linux"')

port_to_switch_path = (
  (Path.RELATED, "Msvm_VirtualSystemSettingData"),
  (Path.RELATED, "Msvm_SyntheticEthernetPortSettingData"),
  (Path.RELATED, "Msvm_EthernetPortAllocationSettingData"),
  (Path.PROPERTY, "HostResource", (Property.ARRAY, ManagementObjectTransformer))
)
# list(list(machineSettings.GetRelated("Msvm_SyntheticEthernetPortSettingData"))[0].GetRelated("Msvm_EthernetPortAllocationSettingData"))[0].Properties["HostResource"].Value[0]
print()

pts = management_object_traversal(port_to_switch_path, machine)
for _, ss, _, ws in pts:
  print("Network adapter with mac '%s' connected to switch '%s'" % (ss.Properties['Address'].Value,
                                                                    ws.Properties['ElementName'].Value))
pass

# VM creation. What a pain...
# vssd = scope.createClassInstance("Msvm_VirtualSystemSettingData")
# vssd.Properties["ElementName"].Value = "hello"
# vssd.Properties["VirtualsystemSubtype"].Value = "Microsoft:Hyper-V:Subtype:1"
#
virtualSystemService = scope.queryOne("SELECT * FROM Msvm_VirtualSystemManagementService")
# inParams = virtualSystemService.GetMethodParameters("DefineSystem")
# inParams["SystemSettings"] = vssd.GetText(TextFormat.WmiDtd20)
# outParams = virtualSystemService.InvokeMethod("DefineSystem", inParams, None)

hello = scope.queryOne('SELECT * FROM Msvm_ComputerSystem WHERE Caption = "Virtual Machine" AND ElementName = "hello"')
cpu_settings = management_object_traversal(
  (
    (Path.RELATED, "Msvm_VirtualSystemSettingData"),
    (Path.RELATED, "Msvm_ProcessorSettingData")
  ),
  hello
)[-1][-1]
cpu_settings.Properties['VirtualQuantity'].Value = 6
# $result = $VMMS.ModifyVirtualSystemResources($VM, $ProcSetting.GetText(1))
# outParams = virtualSystemService.InvokeMethod("ModifyVirtualSystemResources", hello, None)
callWmiMethod(virtualSystemService, "ModifyResourceSettings", ResourceSettings=[cpu_settings])
pprint.pprint(get_properties(cpu_settings))
cpu_settings = management_object_traversal(
  (
    (Path.RELATED, "Msvm_VirtualSystemSettingData"),
    (Path.RELATED, "Msvm_ProcessorSettingData")
  ),
  machine
)[-1][-1]
pprint.pprint(get_properties(cpu_settings))
pass
# \\WS\root\virtualization\v2:Msvm_VirtualEthernetSwitch.CreationClassName="Msvm_VirtualEthernetSwitch",Name="EA6B2C07-4A1F-40C2-892E-40B24C36244B"
